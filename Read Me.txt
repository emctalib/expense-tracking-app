npx create-react-app expense-tracking-app --template typescript
npm install --save react-toastify
npm install react-bootstrap-icons --save
npm install react-bootstrap bootstrap@5.1.3

npm install @reduxjs/toolkit
npm install redux
npm instal react-redux
npm install axios
--npm install redux-logger
npm install redux-logger 
npm install immutable
-- npm install react-confirm-alert --save
--npm install react-datepicker --save
npm install moment
npm i react-router-dom
npm install uuid
npm install --save react-chartjs-2 chart.js

npm i --save-dev @types/styled-components
npm install react-icons --save

--npm install @fluentui/react
--npm i @fluentui/react-northstar
npm test
npm install --save-dev webpack-merge
npm install --save-dev mini-css-extract-plugin
npm run build




babel=>jsx compiler to javascript
useState: save state in component
useContext/createContext: use to save/share global state.

/*********************/
children prop => <div a="a prop" b="b prop">children contents</div>
/*********************/

useRef [useRef is a hook that allows to directly create a reference to the DOM element in the functional component]
createRef work same as useRef but use in class component React.createRef()
createRef=>useRef
class=>function
createRef hook creates a new reference
useRef hook will return the same reference
useRef hold current value which is mutable value and dont cause render.

/*********************/
useReducer hook: use for complex state instead useState.
It is like redux but part of react. u can say smaller than redux
/*********************/
React.suspense.....
React.lazy = const OtherComponent = React.lazy(() => import('./OtherComponent'));
https://reactjs.org/docs/code-splitting.html
/*********************/
useEffect =componentDidMount componentDidUpdate componentWillUnmount 
/*********************/
useLayoutEffect : it is same as useEffect but is synchronous before changes pain in browser. it fires synchronously after all DOM mutations. Use this to read layout from the DOM and synchronously re-render.
example: u dont want to show changes to user until completed.
/*********************/
useMemo: useMemo will only recompute the memoized value when one of the dependencies has changed.
/*********************/
useCallback: //useCallback: useCallback will return a memoized version of the callback that only changes if one of the dependencies has changed. Pass an inline callback and an array of dependencies.
this hook will call when u call from some function only. use like const.
example: learning2 components in code
The useCallback and useMemo Hooks are similar. The main difference is that useMemo returns a memoized value and useCallback returns a memoized function
/*********************/
React.PureComponent
/*********************/
dangerouslySetInnerHTML
use html as string then put in some div
/*********************/
error boundary
/*********************/
<React.Fragment>
wrap contents with Fragment or <></>
/*********************/
ReactDOM.createPortal
Portals provide a first-class way to render children into a DOM node that exists outside the DOM hierarchy of the parent component.
/*********************/
useEffect(() => {
  setName('John');
}, [name]
...
class Button extends React.Component{

  constructor(props) {
    super(props);
    // Missing line
  }

  handleClick() {...}
}

https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/error_boundaries/
https://reactjs.org/docs/error-boundaries.html
https://reactjs.org/docs/react-api.html
https://reactjs.org/docs/concurrent-mode-suspense.html
https://www.samanthaming.com/tidbits/70-3-ways-to-clone-objects/
https://redux.js.org/tutorials/essentials/part-4-using-data
https://gitlab.com/asielalvarez/expenses.frontend/-/blob/master/src/components/ExpenseForm.js
https://redux-toolkit.js.org/api/createslice
https://react-redux.js.org/api/hooks
https://react-redux.js.org/using-react-redux/usage-with-typescript
https://typeofnan.dev/how-to-use-the-useselector-redux-hook-with-typescript/
https://redux.js.org/tutorials/fundamentals/part-4-store#configuring-the-store
https://redux.js.org/tutorials/fundamentals/part-5-ui-react
https://www.titanwolf.org/Network/q/e25b3a75-024c-49d2-99ca-409b753ef9f3/y+
https://redux-toolkit.js.org/api/serializabilityMiddleware
https://unpkg.com/@reduxjs/toolkit@1.5.0/src/serializableStateInvariantMiddleware.ts
https://github.com/DevMonsterProjects/react-redux-typescript/blob/master/src/App/App.tsx
https://www.youtube.com/watch?v=udr2rx_B99w
https://redux.js.org/tutorials/fundamentals/part-3-state-actions-reducers
https://www.johnraptis.dev/using-redux-with-classes-and-hooks/
https://github.com/jquense/yup
https://serverless-stack.com/chapters/redirect-on-login-and-logout.html
https://serverless-stack.com/chapters/give-feedback-while-logging-in.html
https://www.digitalocean.com/community/tutorials/how-to-add-login-authentication-to-react-applications
https://www.cluemediator.com/login-app-create-login-form-in-reactjs-using-secure-rest-api
https://github.com/aruzo1/todo-react-redux?ref=reactjsexample.com
https://www.telerik.com/blogs/usecallback-useref-two-react-hooks-you-should-learn
https://www.geeksforgeeks.org/how-to-develop-user-registration-form-in-reactjs/
https://www.w3schools.com/react/react_usecallback.asp
https://dev.to/spukas/3-reasons-to-usereducer-over-usestate-43ad
